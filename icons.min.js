const sharp=require('sharp');const fs=require('fs');const path=require('path');const inputFile='static/img/brand.png';const outputDir=path.join(__dirname,'static/img/icons');if(!fs.existsSync(inputFile)){console.error("❌ Error: brand.png file not found in the 'static/img' directory");process.exit(1)}if(!fs.existsSync(outputDir)){fs.mkdirSync(outputDir,{recursive:!0})}const generateImage=async(file,width,height,format,options={})=>{try{await sharp(inputFile).resize(width,height,options).toFormat(format,{quality:80}).toFile(path.join(outputDir,file));console.log(`  -> Generated ${file}`)}catch(err){console.error(`Error generating ${file}:`,err)}};const faviconImages=[{name:'favicon.ico',width:16,height:16},{name:'favicon-32x32.png',width:32,height:32},{name:'ms-icon-144x144.png',width:144,height:144},{name:'apple-icon-180x180.png',width:180,height:180},{name:'android-icon-192x192.png',width:192,height:192},];const seoCards=[{name:'opengraph.webp',width:1200,height:630,format:'webp',options:{fit:"cover",kernel:sharp.kernel.lanczos3}},{name:'twittercard.webp',width:1200,height:675,format:'webp',options:{fit:"cover",kernel:sharp.kernel.lanczos3}}];console.log("Generated icons will be stored in 'static/img/icons/'");const generateAll=async()=>{const promises=[...faviconImages,...seoCards].map(({name,width,height,format='png',options={}})=>{return generateImage(name,width,height,format,options)});await Promise.all(promises)};generateAll().catch(err=>console.error("Error generating images:",err))

/*
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// Correct the input path to match your project structure
const inputFile = path.join(__dirname, 'static/img/brand.png'); // Adjusted path
const outputDir = path.join(__dirname, 'static/img/icons'); // Consistent directory

if (!fs.existsSync(inputFile)) {
  console.error("❌ Error: brand.png file not found in 'static/img' directory");
  process.exit(1);
}

if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

const generateImage = async (file, width, height, format = 'png', options = {}) => {
  try {
    await sharp(inputFile)
      .resize(width, height, options)
      .toFormat(format, {
        quality: 80,
        // ICO-specific options (if needed)
        ...(format === 'ico' ? { density: 72 } : {}) 
      })
      .toFile(path.join(outputDir, file));
    console.log(`  -> Generated ${file}`);
  } catch (err) {
    console.error(`Error generating ${file}:`, err);
  }
};

// Specify format for ICO file
const faviconImages = [
  { name: 'favicon.ico', width: 16, height: 16, format: 'ico' }, // Added format
  { name: 'favicon-32x32.png', width: 32, height: 32 },
  { name: 'ms-icon-144x144.png', width: 144, height: 144 },
  { name: 'apple-icon-180x180.png', width: 180, height: 180 },
  { name: 'android-icon-192x192.png', width: 192, height: 192 },
];

const seoCards = [
  { name: 'opengraph.webp', width: 1200, height: 630, format: 'webp', options: { fit: "cover", kernel: sharp.kernel.lanczos3 } },
  { name: 'twittercard.webp', width: 1200, height: 675, format: 'webp', options: { fit: "cover", kernel: sharp.kernel.lanczos3 } }
];

console.log("Generated icons will be stored in 'static/img/icons'");

const generateAll = async () => {
  const promises = [...faviconImages, ...seoCards].map(({ name, width, height, format, options }) => {
    return generateImage(name, width, height, format, options);
  });
  await Promise.all(promises);
};

generateAll().catch(err => console.error("Error generating images:", err));
*/