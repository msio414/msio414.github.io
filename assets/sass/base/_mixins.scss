@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'global' as g;
@use 'functions' as f;

// Based on: https://chriskirknielsen.com/blog/modern-fluid-typography-with-clamp/
@mixin font-size($min-value, $max-value) {
    $min-vw: math.min(g.$min-vw, g.$max-vw);
    $max-vw: math.max(g.$max-vw, g.$min-vw);

    $min-clamp: math.min($min-value, $max-value);
    $max-clamp: math.max($max-value, $min-value);

    $range-vw: $max-vw - $min-vw;
    $range-value: $max-clamp - $min-clamp;

    @if $range-vw == 0 or $range-value == 0 {
        @error 'Minimum and maximum viewports/values must not be equal.';
    }

    $factor: math.div(1, $range-vw) * $range-value;
    $vw-scaling: 100vw * $factor;
    $base-value: $min-clamp - ($min-vw * $factor);

    font-size: $min-clamp;
    font-size: clamp(#{$min-clamp}, string.unquote('#{$base-value} + #{$vw-scaling}'), #{$max-clamp});
}

@mixin breakpoint($size, $media-dir: "max-width") {
    $breakpoints: (small: 33rem, medium: 42rem, large: 48rem);

    $type: meta.type-of($size);
    @if $type == number {
        @media (#{$media-dir}: #{f.remify($size)}) {
            @content;
        }
    }
    @else if $type == string {
        @if map.has-key($breakpoints, $size) {
            @media (#{$media-dir}: map.get($breakpoints, $size)) {
                @content;
            }
        }
        @else if f.has-valid-unit($size) {
            @media (#{$media-dir}: #{$size}) {
                @content;
            }
        }
        @else {
            @error "ðŸš« Invalid breakpoint `#{$size}`. Expected unit value (e.g., 20rem, 480px) or one of: #{map.keys($breakpoints)}.";
        }
    }
    @else {
        @error "ðŸš« Invalid breakpoint `#{$size}`. Expected unit value (e.g., 20rem, 480px) or one of: #{map.keys($breakpoints)}.";
    }
}
